#lang racket
;create my own append function
(define (myAppend lst1 lst2)
  (if (null? lst1)
      lst2
  (cons (car lst1) (myAppend (cdr lst1) lst2))))

(define (lcycle x)                                      ;if list empty return '()
  (if (null? x)
      '()
  (myAppend (cdr x) (list (car x)))))                   ;add first element (car) of list to end list (cdr)
                                                        ;append '(1) to end of '(2 3 4 5)
(lcycle (list 1 2 3 4 5))

;==========================================================================================

;create a function to reverse a string
(define (myReverse r)                                   ;if list empty return '()
  (if (null? r)
      '()
      (myAppend (myReverse (cdr r))(list (car r)))))    ;Using append funcion cd

(myReverse (list 1 2 3 4 5 6 7 8 9 10))

(define (rcycle x)
  (if (null? x)
      '()                           
  (myReverse (lcycle (myReverse x)))))                  ;reverse list to '(5 4 3 2 1)
                                                        ;apply lcycle to list, then reverse it
                                                        ;'(4 3 2 1 5) => '(5 4 3 2 1)

 (rcycle (list 1 2 3 4 5))

;==========================================================================================
